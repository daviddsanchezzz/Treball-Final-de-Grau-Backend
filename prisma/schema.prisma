generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   Int                       @id @default(autoincrement())
  nombre               String
  email                String                   @unique
  contrase√±a           String
  esAdmin              Boolean                  @default(false)
  trabajos             UsuarioTrabajoRol[] 
  evaluaciones         EvaluacionFinalEvaluador[] @relation("EvaluadorUsuario")
  tutorTrabajos        Trabajo[]               @relation("TutorUsuario")
  notas                Nota[]                  @relation("ProfesorNotas")
}

model Roles {
  id     Int    @id @default(autoincrement())
  nombre String
  usuarios UsuarioTrabajoRol[] 
  rubricas Rubricas[] 
}

model UsuarioTrabajoRol {
  id        Int     @id @default(autoincrement())
  rol       Roles   @relation(fields: [rolId], references: [id])
  rolId     Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  trabajo   Trabajo @relation(fields: [trabajoId], references: [id], onDelete: Cascade)
  trabajoId Int
}

model Trabajo {
  id                    Int                      @id @default(autoincrement())
  titulo                String
  descripcion           String?
  estudiante            String @default("Estudiante temporal")
  tutor                 Usuario                  @relation("TutorUsuario", fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId               Int
  area                  Area                     @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId                Int
  notaFinalTutor        Float?
  notaMediaEvaluadores  Float?
  notaFinalTrabajo      Float?
  estado                Estado   @default(PENDIENTE)  

  evaluacionesFinal     EvaluacionFinalEvaluador[] 
  evaluacionFinalTutor  EvaluacionFinalTutor[] 
  notas                 Nota[] 
  usuarioTrabajoRoles   UsuarioTrabajoRol[] 
}

model EvaluacionFinalEvaluador {
  id           Int     @id @default(autoincrement())
  trabajo      Trabajo @relation(fields: [trabajoId], references: [id], onDelete: Cascade)
  trabajoId    Int
  evaluador    Usuario @relation("EvaluadorUsuario", fields: [evaluadorId], references: [id])
  evaluadorId  Int
  observaciones String?
  matricula     String?
  notaFinal     Float?
}

model EvaluacionFinalTutor {
  id             Int            @id @default(autoincrement())
  trabajo        Trabajo        @relation(fields: [trabajoId], references: [id], onDelete: Cascade)
  trabajoId      Int
  puntoControl   PuntosDeControl @relation(fields: [puntoControlId], references: [id])
  puntoControlId Int
  notaFinalPC    Float?
  observacionPC  String?
}

model Area {
  id      Int           @id @default(autoincrement())
  nombre  String
  trabajos Trabajo[] 
  areaRubrica AreaRubrica[] 
}

model Rubricas {
  id     Int      @id @default(autoincrement())
  nombre String
  rol    Roles    @relation(fields: [rolId], references: [id])
  rolId  Int
  criterios Criterios[] 
  puntosDeControl PuntosDeControl[] 
  areaRubrica AreaRubrica[] 
}

model AreaRubrica {
  id        Int      @id @default(autoincrement())
  area      Area     @relation(fields: [areaId], references: [id])
  areaId    Int
  rubrica   Rubricas @relation(fields: [rubricaId], references: [id])
  rubricaId Int
}

model PuntosDeControl {
  id       Int       @id @default(autoincrement())
  nombre   String
  rubrica  Rubricas  @relation(fields: [rubricaId], references: [id], onDelete: Cascade)
  rubricaId Int
  peso     Float
  criterios CriterioPuntoDeControl[] 
  evaluacionesFinalTutor EvaluacionFinalTutor[] 
}

model Criterios {
  id        Int       @id @default(autoincrement())
  nombre    String
  rubrica   Rubricas  @relation(fields: [rubricaId], references: [id])
  rubricaId Int
  criterioPuntoDeControl CriterioPuntoDeControl[] 
}

model CriterioPuntoDeControl {
  id              Int              @id @default(autoincrement())
  criterio        Criterios       @relation(fields: [criterioId], references: [id])
  criterioId      Int
  puntoControl    PuntosDeControl @relation(fields: [puntoControlId], references: [id])
  puntoControlId  Int
  peso            Float
  notas           Nota[] 
}

model Nota {
  id         Int                    @id @default(autoincrement())
  nota       Float
  trabajo    Trabajo                @relation(fields: [trabajoId], references: [id], onDelete: Cascade)
  trabajoId  Int
  profesor   Usuario                @relation("ProfesorNotas", fields: [profesorId], references: [id])
  profesorId Int
  cpc        CriterioPuntoDeControl @relation(fields: [cpcId], references: [id])
  cpcId      Int
}

enum Estado {
  PENDIENTE
  EN_PROGRESO
  FINALIZADO
}
